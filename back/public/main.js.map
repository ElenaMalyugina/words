{"version":3,"sources":["webpack:///./const/urls.const.ts","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/card/card.component.html","webpack:///./src/app/card/card.component.scss","webpack:///./src/app/card/card.component.ts","webpack:///./src/app/card/card.service.ts","webpack:///./src/app/customReuseStrategy.ts","webpack:///./src/app/general/general.component.html","webpack:///./src/app/general/general.component.scss","webpack:///./src/app/general/general.component.ts","webpack:///./src/app/list-words/list-words.component.html","webpack:///./src/app/list-words/list-words.component.scss","webpack:///./src/app/list-words/list-words.component.ts","webpack:///./src/app/list-words/list-words.service.ts","webpack:///./src/app/models/cardModel.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export const URLS = {\r\n    api: 'http://localhost:3000/api/'\r\n\r\n}","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<header class=\\\"navbar navbar-dark bg-dark\\\">\\n  <a href=\\\"#\\\" [routerLink]=\\\"['/general']\\\" class=\\\"navbar-brand\\\">English Words</a>\\n</header>\\n<div class=\\\"container\\\">\\n  <router-outlet></router-outlet>\\n</div>  \"","module.exports = \"header {\\n  margin-bottom: 40px; }\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule }   from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { RouterModule, Routes, RouteReuseStrategy } from '@angular/router';\nimport { CardComponent } from './card/card.component';\nimport { CardService } from './card/card.service';\nimport { CustomRouteReuseStrategy } from './customReuseStrategy';\nimport { GeneralComponent } from './general/general.component';\nimport { ListWordsComponent } from './list-words/list-words.component';\nimport { ListWordsService} from './list-words/list-words.service';\n\nconst appRoutes: Routes = [\n  { path: 'card/:id',\n    component: CardComponent\n  },\n  {\n    path: 'listWords', \n    component: ListWordsComponent\n  },\n  {\n    path:'general',\n    component: GeneralComponent\n  },\n  { path: '',\n    redirectTo: '/general',\n    pathMatch: 'full'    \n  },\n  { path: '**', component: GeneralComponent }\n];\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CardComponent,\n    GeneralComponent,\n    ListWordsComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    RouterModule.forRoot(\n      appRoutes\n    )\n  ],\n  providers: [\n    {\n      provide: RouteReuseStrategy,\n      useClass: CustomRouteReuseStrategy\n    },\n    CardService,\n    ListWordsService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<div class=\\\"container-buttons col-lg-6 col-10\\\" *ngIf=\\\"getId()!='0'\\\" >\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"updateWord()\\\">Изменить карточку</button>\\n  <button class=\\\"btn btn-primary\\\" (click)=\\\"isUpdate=false\\\" [routerLink]=\\\"['/card/0']\\\">Добавить слово</button>\\n</div>\\n<form class=\\\"jumbotron col-lg-6 col-10\\\">\\n  <div class=\\\"form-group\\\">\\n    <label for=\\\"english\\\">English</label>\\n    <input class=\\\"form-control\\\" [ngModel]=\\\"card.englishWord\\\" (ngModelChange)=\\\"layoutSwitcherToEn($event)\\\" name=\\\"english\\\" [disabled]=\\\"disabledInput\\\">\\n  </div>\\n  <div class=\\\"form-group\\\">\\n    <button [hidden]=\\\"isUpdate || isNewWord\\\" (click)=\\\"toggleShowRussian()\\\">{{cardService.showRussian? 'Скрыть перевод': 'Показать перевод'}}</button>\\n  </div>\\n  <div class=\\\"form-group\\\" [hidden]=\\\"!cardService.showRussian && !isUpdate && !isNewWord\\\">\\n      <label for=\\\"russian\\\">Russian</label>\\n      <input class=\\\"form-control\\\" [ngModel]=\\\"card.russianWord\\\" (ngModelChange)=\\\"layoutSwitcherToRu($event)\\\" name=\\\"russian\\\" [disabled]=\\\"disabledInput\\\">      \\n  </div>\\n  <div class=\\\"form-group form-check\\\" *ngIf=\\\"!isNewWord\\\">    \\n    <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" [ngModel]=\\\"card.isHardly\\\" (ngModelChange)=\\\"setIsHardlly($event)\\\" name=\\\"isHardly\\\" id=\\\"isHardly\\\"> \\n    <label class=\\\"form-check-label\\\" for=\\\"isHardly\\\">В плохо запоминаемое</label>\\n  </div>\\n  <div class=\\\"container-buttons\\\">\\n    <button class=\\\"btn btn-primary\\\" [hidden]=\\\"!isNewWord\\\" (click)=\\\"sendNewWord()\\\">Создать</button>\\n    <button class=\\\"btn btn-primary\\\" [hidden]=\\\"!isUpdate\\\" (click)=\\\"sendUpdate()\\\">Отправить</button>\\n    <button class=\\\"btn btn-primary\\\" [hidden]=\\\"!isUpdate&&!isNewWord\\\" (click)=\\\"cancel()\\\">Отмена</button>\\n  </div>\\n  <a href=\\\"#\\\" [routerLink]=\\\"[prevLink]\\\" class=\\\"btn btn-primary link link-prev\\\"><</a>\\n  <a href=\\\"#\\\" [routerLink]=\\\"[nextLink]\\\" class=\\\"btn btn-primary link link-next\\\">></a>\\n  <p *ngIf=\\\"getId()>0\\\">Карточка {{getId()}} из {{cardsLength}}</p>\\n</form>\\n<div *ngIf=\\\"!isNewWord\\\" class=\\\"form-group form-check col-lg-6 col-10 ml-auto\\\">\\n  <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"cardService.onlyHardly\\\" (ngModelChange)=\\\"filterWords($event)\\\" id=\\\"onlyHardly\\\">\\n  <label class=\\\"form-check-label\\\" for=\\\"onlyHardly\\\"> Только плохо запоминаемые</label>\\n</div>\\n\\n\"","module.exports = \".container-buttons {\\n  text-align: right;\\n  margin-bottom: 20px;\\n  margin-right: auto;\\n  margin-left: auto; }\\n  .container-buttons button {\\n    margin-left: 10px; }\\n  form {\\n  margin: 0 auto 20px auto;\\n  position: relative; }\\n  .link {\\n  position: absolute;\\n  top: 50%;\\n  -webkit-transform: translateY(-50%);\\n          transform: translateY(-50%); }\\n  .link-prev {\\n  left: -50px; }\\n  .link-next {\\n  right: -50px; }\\n  .form-control:disabled {\\n  background: #fff; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { CardModel, CardResponse } from '../models/cardModel';\nimport { CardService } from './card.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport * as ru from 'convert-layout/ru';\n\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent implements OnInit {\n  card: CardModel = new CardModel('', '');\n  cardsLength: number;\n  disabledInput: boolean = true;\n  isUpdate: boolean = false;\n  isNewWord: boolean = false;\n    \n  constructor(private cardService: CardService, private actvatedRoute: ActivatedRoute, private router: Router){}\n\n  get prevLink(){\n    let prevInd=parseInt(this.getId())-1;\n    if(prevInd<1){\n      prevInd=this.cardsLength;\n    }\n    let newLink='/card/' + prevInd;\n    return newLink;\n  }\n\n  get nextLink(){\n    let nextInd=parseInt(this.getId())+1;\n    if(nextInd> this.cardsLength){\n      nextInd= 1;\n    }\n    \n    let newLink='/card/' + nextInd;\n    return newLink;\n  }\n\n  ngOnInit() {\n    this.getWord();    \n  }\n\n  public getId(){\n    return this.actvatedRoute.snapshot.paramMap.get('id');\n  }\n\n  private getCountWords(callback?){\n    return this.cardService.getCardsLength()\n      .subscribe(\n        (resp)=>{\n          this.cardsLength= resp.count;\n          if(callback){\n            callback();\n          }\n         \n      });\n  }\n\n  public getWord(){\n    this.getCountWords();\n    let i=this.getId();\n\n    if(i!='0'){\n      this.cardService.getCardData(i)\n        .subscribe(\n          (resp: CardModel)=>{\n            this.card=resp;\n          },\n          (err)=>{\n            console.log(err);\n        }\n      )\n    }\n    else{\n      this.addWord();\n    }\n  }\n\n  public addWord(){\n    this.card=new CardModel('','');\n    this.isNewWord = true;\n    this.isUpdate = false;\n    this.disabledInput = false;\n  }\n\n  sendNewWord(){\n    this.cardService.postCardData(this.card)\n      .subscribe((resp)=>{\n        this.cardService.onlyHardly = false;\n        let callback=()=>this.router.navigate([`/card/${this.cardsLength}`]);     \n        this.getCountWords(callback);          \n      });\n  }\n\n  public updateWord(){\n    this.isUpdate = true;\n    this.isNewWord =false;\n    this.disabledInput = false;\n  }\n\n  sendUpdate(){\n    this.cardService.updateCardData(this.card)\n      .subscribe(\n        (resp)=>{\n          this.getWord();  \n          this.isUpdate= false;\n          this.disabledInput = true;\n        },\n        (err)=>console.log(err)\n    )\n  }\n\n  setIsHardlly(e){\n    this.card.isHardly= e;\n    console.log(this.card);\n    this.cardService.setHardly(this.card).subscribe((data)=>{\n      console.log(data);\n    })\n  }\n\n  public toggleShowRussian(){\n    this.cardService.showRussian=!this.cardService.showRussian;\n  }\n\n  public cancel(){\n    this.isUpdate=false;\n    this.isNewWord=false;\n\n    if(this.getId()=='0'){\n      this.router.navigate(['card/1'])\n\n    }\n  }\n\n  filterWords(e){\n    if(this.getId()==\"1\"){\n      this.getWord();\n    }\n    else{\n      this.router.navigate(['card/1']);\n    }   \n  }\n\n  public layoutSwitcherToRu(e: string){\n    this.card.russianWord= ru.fromEn(e);\n  }\n\n  public layoutSwitcherToEn(e: string){\n    this.card.englishWord= ru.toEn(e);\n  }\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from \"rxjs\";\r\nimport { CardModel, CardResponse } from \"../models/cardModel\";\r\nimport { URLS } from \"const/urls.const\";\r\n\r\n@Injectable()\r\nexport class CardService{\r\n    public showRussian: boolean;\r\n    public onlyHardly: boolean;\r\n\r\n    constructor(private http: HttpClient){ }\r\n\r\n    public getCardsLength():Observable<{count: number}>{\r\n        return this.http.get<{count: number}>(`${URLS.api}card/count?onlyHardly=${this.onlyHardly}`);\r\n    }\r\n    \r\n    public getCardData(id): Observable<CardModel> {\r\n        return this.http.get<CardModel>(`${URLS.api}card?id=${id}&onlyHardly=${this.onlyHardly}`);\r\n    }\r\n\r\n    public postCardData(newWord){\r\n        return this.http.post(`${URLS.api}card`, newWord);\r\n    }\r\n\r\n    public updateCardData(changeWord){\r\n        return this.http.put(`${URLS.api}card`, changeWord);\r\n    }\r\n\r\n    public setHardly(card){\r\n        return this.http.put(`${URLS.api}card/setHardly`, card );\r\n    }\r\n}","import {RouteReuseStrategy, DetachedRouteHandle } from '@angular/router';\r\nimport {ActivatedRouteSnapshot} from '@angular/router';\r\n\r\nexport class CustomRouteReuseStrategy implements RouteReuseStrategy {\r\n  routesToCache: string[] = [];\r\n  storedRouteHandles = new Map<string, DetachedRouteHandle>();\r\n\r\n  // Decides if the route should be stored\r\n  shouldDetach(route: ActivatedRouteSnapshot): boolean {\r\n    return this.routesToCache.indexOf(route.routeConfig.path) > -1;\r\n  }\r\n\r\n  //Store the information for the route we're destructing\r\n  store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {\r\n    this.storedRouteHandles.set(route.routeConfig.path, handle);\r\n  }\r\n\r\n  //Return true if we have a stored route object for the next route\r\n  shouldAttach(route: ActivatedRouteSnapshot): boolean {\r\n    return this.storedRouteHandles.has(route.routeConfig.path);\r\n  }\r\n\r\n  //If we returned true in shouldAttach(), now return the actual route data for restoration\r\n  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle {\r\n    return this.storedRouteHandles.get(route.routeConfig.path);\r\n  }\r\n\r\n  //Reuse the route if we're going to and from the same route\r\n  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\r\n    let name = future.component && (<any>future.component).name;\r\n    return (future.routeConfig === curr.routeConfig) && (name !== 'CardComponent');\r\n  }\r\n}","module.exports = \"<nav>\\n  <ul class=\\\"nav\\\">\\n    <li class=\\\"nav-item\\\">\\n      <a class=\\\"nav-link\\\" href=\\\"#\\\" [routerLink]=\\\"['/card/1']\\\" tabindex=\\\"0\\\">Карточки</a>   \\n    </li>\\n    <li>\\n      <a class=\\\"nav-link\\\" href=\\\"#\\\" [routerLink]=\\\"['/listWords']\\\" tabindex=\\\"0\\\">Список слов</a>\\n    </li>\\n  </ul>\\n</nav>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-general',\n  templateUrl: './general.component.html',\n  styleUrls: ['./general.component.scss']\n})\nexport class GeneralComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<h3>Список Ваших слов</h3>\\n<div class=\\\"form-group form-check\\\">\\n  <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" [ngModel]=\\\"onlyHardly\\\" (ngModelChange)=\\\"filterWords($event)\\\" id=\\\"onlyHardly\\\">\\n  <label class=\\\"form-check-label\\\" for=\\\"onlyHardly\\\"> Только трудные</label>\\n</div>\\n<table class=\\\"table table-striped\\\">\\n  <thead>\\n    <tr>\\n      <th scope=\\\"col\\\">#</th>\\n      <th scope=\\\"col\\\">English</th>\\n      <th scope=\\\"col\\\">Russian</th>\\n      <th scope=\\\"col\\\">Трудное для изучения</th>\\n      <th scope=\\\"col\\\">Переход к карточке</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr *ngFor=\\\"let el of listShowWords; let i = index\\\">\\n      <td >{{i+1}}</td>\\n      <td>{{el.englishWord}}</td>\\n      <td>{{el.russianWord}}</td>\\n      <td>{{el.isHardly ? 'да': ''}}</td>\\n      <td>\\n        <a href=\\\"#\\\" [routerLink]=\\\"['/card/'+ (i+1)]\\\">{{el.englishWord}}</a>\\n      </td>\\n    </tr>    \\n  </tbody>\\n</table>\"","module.exports = \"@media (max-width: 575px) {\\n  table thead tr th:nth-child(4) {\\n    display: none; }\\n  table tbody tr td:nth-child(4) {\\n    display: none; } }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ListWordsService } from './list-words.service';\n\n@Component({\n  selector: 'app-list-words',\n  templateUrl: './list-words.component.html',\n  styleUrls: ['./list-words.component.scss']\n})\nexport class ListWordsComponent implements OnInit {\n  listWords: any = [];\n  onlyHardly: boolean;\n  listShowWords:any = [];\n\n  constructor(private listWordsService: ListWordsService) { }\n\n  ngOnInit() {\n    this.listWordsService.getWords().subscribe((d)=>{\n      this.listWords = d;\n      this.listShowWords = d;\n    })\n  }\n\n  filterWords(e){    \n    if(e){ \n      this.listShowWords = this.listWords.filter(el=> {\n        return el.isHardly === true;\n      });\n      \n    }\n    else{\n      this.listShowWords = this.listWords;\n    }\n\n\n  }\n\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from \"rxjs\";\r\nimport { CardModel, CardResponse } from \"../models/cardModel\";\r\nimport { URLS } from \"const/urls.const\";\r\n\r\n@Injectable()\r\nexport class ListWordsService{\r\n\r\n    constructor(private http: HttpClient){ }\r\n\r\n    getWords(){\r\n        return this.http.get(`${URLS.api}listWords`);\r\n    }\r\n\r\n}","export class CardModel{\r\n    id: string;\r\n    englishWord: string;\r\n    russianWord: string;\r\n    isHardly: boolean;\r\n\r\n    constructor(englishWord, russianWord){\r\n        this.englishWord=englishWord;\r\n        this.russianWord=russianWord;\r\n    }\r\n}\r\n\r\nexport interface CardResponse{\r\n    count: number;\r\n    card: CardModel;\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}